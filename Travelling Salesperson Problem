#include <stdio.h>
#include <limits.h>

#define V 4  // Number of vertices (cities)

int tsp(int dist[][V], int visited[], int currPos, int n, int count, int cost, int ans) {
    if (count == n && dist[currPos][0]) {  // All cities visited and can return to start
        return (cost + dist[currPos][0] < ans) ? cost + dist[currPos][0] : ans;
    }

    for (int city = 0; city < n; city++) {
        if (!visited[city] && dist[currPos][city]) {
            visited[city] = 1;
            ans = tsp(dist, visited, city, n, count + 1, cost + dist[currPos][city], ans);
            visited[city] = 0;
        }
    }

    return ans;
}

int main() {
    int dist[V][V] = {
        {0, 10, 15, 20},
        {10, 0, 35, 25},
        {15, 35, 0, 30},
        {20, 25, 30, 0}
    };

    int visited[V] = {0};  // Array to track visited cities
    visited[0] = 1;  // Start at city 0
    int ans = INT_MAX;
    int minCost = tsp(dist, visited, 0, V, 1, 0, ans);

    printf("Minimum cost: %d\n", minCost);
    return 0;
}
