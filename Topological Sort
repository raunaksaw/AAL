#include <stdio.h>
#include <stdlib.h>

#define MAX_VERTICES 6

typedef struct Queue {
    int items[MAX_VERTICES];
    int front, rear;
} Queue;

void initQueue(Queue* q) {
    q->front = -1;
    q->rear = -1;
}

int isQueueEmpty(Queue* q) {
    return q->front == -1;
}

void enqueue(Queue* q, int value) {
    if (q->rear == MAX_VERTICES - 1) {
        printf("Queue is full\n");
        return;
    }
    if (q->front == -1)
        q->front = 0;
    q->rear++;
    q->items[q->rear] = value;
}

int dequeue(Queue* q) {
    if (isQueueEmpty(q)) {
        printf("Queue is empty\n");
        return -1;
    }
    int item = q->items[q->front];
    q->front++;
    if (q->front > q->rear) {
        q->front = q->rear = -1;
    }
    return item;
}

void topologicalSort(int graph[MAX_VERTICES][MAX_VERTICES], int vertices) {
    int inDegree[MAX_VERTICES];
    Queue q;
    initQueue(&q);

    // Calculate in-degree of each vertex
    for (int i = 0; i < vertices; i++) {
        inDegree[i] = 0;
    }

    for (int i = 0; i < vertices; i++) {
        for (int j = 0; j < vertices; j++) {
            if (graph[i][j] == 1) {
                inDegree[j]++;
            }
        }
    }

    // Add vertices with zero in-degree to the queue
    for (int i = 0; i < vertices; i++) {
        if (inDegree[i] == 0) {
            enqueue(&q, i);
        }
    }

    // Process the vertices
    int count = 0;
    while (!isQueueEmpty(&q)) {
        int vertex = dequeue(&q);
        printf("%d ", vertex);
        count++;

        // Decrease in-degree of neighbors
        for (int i = 0; i < vertices; i++) {
            if (graph[vertex][i] == 1) {
                inDegree[i]--;
                if (inDegree[i] == 0) {
                    enqueue(&q, i);
                }
            }
        }
    }

    // If count of processed vertices is not equal to number of vertices, there is a cycle
    if (count != vertices) {
        printf("\nThere exists a cycle in the graph\n");
    } else {
        printf("\n");
    }
}

int main() {
    int graph[MAX_VERTICES][MAX_VERTICES] = {
        {0, 1, 1, 0, 0, 0},
        {0, 0, 1, 0, 0, 0},
        {0, 0, 0, 1, 0, 0},
        {0, 0, 0, 0, 1, 1},
        {0, 0, 0, 0, 0, 1},
        {0, 0, 0, 0, 0, 0}
    };

    printf("Topological Sort of the graph: \n");
    topologicalSort(graph, MAX_VERTICES);

    return 0;
}
